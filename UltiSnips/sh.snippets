snippet info "INFO" b
INFO "$1"
endsnippet

snippet infoo "INFO" b
INFO '$1:' $1
endsnippet

snippet echoo "echo with var" b
echo '$1:' $$1 >&2
endsnippet

snippet if "if" b
if [[ $1 ]] ; then
	$0
fi
endsnippet

snippet fun "function" b
function $1() {
	$0
}
endsnippet

snippet argv "ask for missing option" w
$1=\$\{1$0:?Specify $1\}
endsnippet

snippet default "default to" w
$1=\$\{1:-${2:default}\}
endsnippet

snippet case "case" b
case $$1 in$0
  *)
    DIE 'Unknown value for $1'
  ;;
esac
endsnippet

snippet casei "case item" b
$1)
  $2
;;
endsnippet

snippet null "null" w
/dev/null
endsnippet

snippet ifnotempty "if var not empty" b
if [[ ! -z \$$1 ]] ; then
	$0
fi
endsnippet

snippet trap "trap" b
function cleanup() { test -e "$1" && rm "$1$0" ; }
trap cleanup ERR
endsnippet

snippet eof "eof" b
cat << 'EOF' >> ${1:dst file}
${VISUAL}$0
EOF
endsnippet

snippet p "print" w
echo "$0"
endsnippet

snippet pe "print error" w
echo "$0" >&2
endsnippet

snippet pee "print error with label" w
echo '$1: ' $1$0 >&2
endsnippet

snippet s "string" w
$1 = "$0"
endsnippet

snippet fileExtension "fileExtension" w
filename=$(basename -- "$file")
if [[ $file =~ \. ]] ; then
  extension=."${filename##*.}"
fi
filename="${filename%.*}"
endsnippet

# TODO: test
snippet replace "replace" w
if [[ $filename =~ (.+)(_v[[:digit:]]{8}_[[:digit:]]{6}$) ]] ; then
  filename=${BASH_REMATCH[1]}
fi
echo ${BASH_REMATCH[*]}
endsnippet
