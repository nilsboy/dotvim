snippet info "INFO" b
INFO "$1"
endsnippet

snippet if "if" b
if [[ $1 ]] ; then
	$0
fi
endsnippet

snippet fun "function" b
function $1() {
	${VISUAL}$0
}
endsnippet

snippet main "function" b
function main() {
	${VISUAL}$0
}
main()
endsnippet

snippet argv "ask for missing option" w
$1=\$\{1$0:?Specify $1\}
endsnippet

snippet argv_default "default to" w
$1=\$\{1:-${2:default}\}
endsnippet

snippet case "case" b
case $$1 in$0
  *)
    DIE 'Unknown value for $1'
  ;;
esac
endsnippet

snippet casei "case item" b
$1)
  $2
;;
endsnippet

snippet null "null" w
/dev/null
endsnippet

snippet ifnotempty "if var not empty" b
if [[ ! -z \$$1 ]] ; then
	$0
fi
endsnippet

snippet trap "trap" b
function cleanup() {
	test -e "$1" && rm "$1$0"
}
trap cleanup ERR INT
endsnippet

snippet eof "eof" b
cat << 'EOF' >> ${1:dst file}
${VISUAL}$0
EOF
endsnippet

snippet p "print" w
echo "$0"
endsnippet

snippet pe "print error" w
echo "$0" >&2
endsnippet

snippet pee "print error with label" w
echo '$1: ' $1$0 >&2
endsnippet

snippet s "string" w
$1 = "$0"
endsnippet

snippet fileExtension "fileExtension" w
filename=$(basename -- "$file")
if [[ $file =~ \. ]] ; then
  extension=."${filename##*.}"
fi
filename="${filename%.*}"
endsnippet

# # needs to be tested
# snippet replace "replace" w
# if [[ $filename =~ (.+)(_v[[:digit:]]{8}_[[:digit:]]{6}$) ]] ; then
#   filename=${BASH_REMATCH[1]}
# fi
# echo ${BASH_REMATCH[*]}
# endsnippet

snippet replace "replace" b
$1=${$1/${2:search}/${3:replace$0}}
endsnippet

snippet uppercase "uppercase" w
\${${VISUAL}$0^^}
endsnippet

snippet for "for" b
for $1 in $($2) ; do
  ${VISUAL}$0
done
endsnippet

snippet fori "fori" b
for i in $(seq $1) ; do
  ${VISUAL}$0
done
endsnippet

snippet killchildprocesses "killchildprocesses" b
# kill all processes in current process group (child processes)
trap "kill -9 0" SIGINT
endsnippet

snippet runbackgroundjobs "runbackgroundjobs" b
# kill all processes in current process group (child processes)
trap "kill -9 0" SIGINT
(
  $1 &
  $2 &
) | cat -
endsnippet

# https://stackoverflow.com/questions/4412238/what-is-the-cleanest-way-to-ssh-and-run-multiple-commands-in-bash
# https://unix.stackexchange.com/a/210356
snippet ssh "ssh" b
# kill all processes in current process group (child processes)
trap "kill 0" SIGINT
ssh -tt ${1:host} '/bin/sh -O huponexit' <<EOF
  ${VISUAL}$0
EOF
endsnippet

snippet here "here document" b
cat << EOF >> ${1:filename}
${VISUAL}$0
EOF
endsnippet

snippet jj "jj" b
echo '### jj`!v DebugId()` $1:' $$1 >&2
endsnippet

snippet jjj "line" b
echo '#################################################### jj`!v DebugId()` ${VISUAL}$0' >&2
endsnippet

snippet install-if-missing "install-if-missing" b
type $1 &>/dev/null || pkexec apt install $1$0
endsnippet

snippet try "try" b
set +e
${VISUAL}
set -e
endsnippet

snippet pipe "pipe" b
echo """
foo
bar
""" | tac
endsnippet

snippet err "err" b
err() { echo -e "$@" 1>&2; }
endsnippet

snippet while "while" b
while $1 ; do
	${VISUAL}$0
done
endsnippet

snippet tempfile "create tempfile" b
tmp=$(mktemp --suffix=.$0)
endsnippet

snippet tempdir "tempdir" b
dir=$(mktemp -d)
cd $dir
endsnippet

snippet tailfromline "tailfromline" b
tail -n+${1:line} ${0:file}
endsnippet
