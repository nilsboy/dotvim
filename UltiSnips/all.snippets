priority -300

### global snippets

global !p
def toggle(t, opt):
	opts = t.split('|')
	pos = opts.index(opt)
	if len(opts) == pos + 1:
		pos = 0
	else:
		pos = pos + 1
	return opts[pos]
endglobal

### Brackets

snippet '(^|\s+)(\(|r)' "round brackets / parens" r
`!p snip.rv = match.group(1)`(${VISUAL}$1)$0
endsnippet

snippet "(^|\s+)({|c)" "curly brackets / braces" r
`!p snip.rv = match.group(1)`{${VISUAL}$1}$0
endsnippet

snippet '(^|\s+)(\[|s)' "square brackets" r
`!p snip.rv = match.group(1)`[${VISUAL}$1]$0
endsnippet

snippet '(^|\s+)(\<|a)' "angle brackets / chevrons" r
`!p snip.rv = match.group(1)`<${VISUAL}$1>$0
endsnippet

snippet " "quote" w
"${VISUAL}$1"$0
endsnippet

snippet ' "sigle quote" w
'${VISUAL}$1'$0
endsnippet

snippet ` "backtick" w
\`${VISUAL}$1\`$0
endsnippet

# TODO: check if existing quotes are balanced
# snippet '(^[^"]+)"' "ha" rA
# `!p snip.rv = match.group(1)`"${VISUAL}$1"$0
# endsnippet

priority -200

snippet "(true|false)+" "true|false toggle" r
`!p snip.rv = toggle('true|false', match.group(1))`
endsnippet

snippet "(always|never)+" "always|never toggle" r
`!p snip.rv = toggle('always|never', match.group(1))`
endsnippet

### Non-Ascii-characters

snippet "(u|ü)+" "u|ü toggle" r
`!p snip.rv = toggle('u|ü', match.group(1))`
endsnippet

snippet "(U|Ü)+" "U|Ü toggle" r
`!p snip.rv = toggle('U|ü', match.group(1))`
endsnippet


snippet "(a|ä)+" "a|ä toggle" r
`!p snip.rv = toggle('a|ä', match.group(1))`
endsnippet

snippet "(A|Ä)+" "A|Ä toggle" r
`!p snip.rv = toggle('A|Ä', match.group(1))`
endsnippet

snippet "(o|ö)+" "o|ö toggle" r
`!p snip.rv = toggle('o|ö', match.group(1))`
endsnippet

snippet "(O|Ö)+" "O|Ö toggle" r
`!p snip.rv = toggle('O|Ö', match.group(1))`
endsnippet


snippet "(ss|ß)+" "ss|ß toggle" r
`!p snip.rv = toggle('ss|ß', match.group(1))`
endsnippet

snippet "(eur|EUR|€)+" "eur|EUR|€ toggle" r
`!p snip.rv = toggle('eur|EUR|€', match.group(1))`
endsnippet

snippet micro "Micro sign" i
µ
endsnippet

snippet paragraph "Paragraph sign" w
§
endsnippet

snippet degree "Degree sign" i
°
endsnippet

# snippet '(\d+)' "(\d+)" r
# `!p snip.rv = int(match.group(1)) + 1`
# endsnippet

priority -100

### Misc

# comments
snippet // "multiline comment" w
/* ${VISUAL}$0 */
endsnippet

snippet	node "node shebang" b
#!/usr/bin/env node

// ${1:description}

$0
endsnippet

snippet bash "bash shebang" b
#!/usr/bin/env bash

# ${1:Description}

${2:source bash-helpers}

$0
endsnippet

snippet perl "perl shebang" b
#!/usr/bin/env perl

# ${1:description}

use strict;
use warnings;
no warnings 'uninitialized';
use Data::Dumper;
use utf8;
# binmode('STDOUT', 'utf-8')

$0
endsnippet

snippet date "YYYY-MM-DD" w
(`!v strftime("%F")`)
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%FT%H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

snippet / "comment" b
`!v helpers#surroundings()[0]`$0`!v  helpers#surroundings()[1]`
endsnippet

snippet '.*todo' "TODO" r
`!v helpers#surroundings()[0]`TODO: $0`!v  helpers#surroundings()[1]`
endsnippet

snippet '.*note' "NOTE" r
`!v helpers#surroundings()[0]`Note: $0`!v  helpers#surroundings()[1]`
endsnippet

snippet '.*tag' "TAGS" r
`!v helpers#surroundings()[0]`Tags: $0`!v  helpers#surroundings()[1]`
endsnippet

snippet '.*fix' "FIX" r
`!v helpers#surroundings()[0]`FIX: $0`!v  helpers#surroundings()[1]`
endsnippet

snippet password "generate a secure password" w
`apg -M SNC -n 1`
endsnippet

snippet ls "ls" b
`ls -1`
endsnippet

snippet path "path" w
`!v expand('%:p')`
endsnippet

snippet dir "dir" w
`!v expand('%:p:h:t')`
endsnippet

snippet file "file" w
`!v expand('%')`
endsnippet

snippet home "home" w
`!v $HOME`
endsnippet

snippet "(DEBUG|INFO)+" "DEBUG|INFO toggle" r
`!p snip.rv = toggle('DEBUG|INFO', match.group(1))`
endsnippet

snippet uuid "uuid" w
`uuidgen`
endsnippet

snippet javascript_skeleton "javascript_skeleton" b
README.md
package.json
pm2.json
Dockerfile
endsnippet

