priority 2

### global snippets

global !p
def toggle(t, opt):
  opts = t.split('|')
  pos = opts.index(opt)
  if len(opts) == pos + 1:
    pos = 0
  else:
    pos = pos + 1
  return opts[pos]
endglobal

### Brackets

# # snippet '(^|\s+)(\(|r)' "round brackets / parens" r
# snippet '\(' "round brackets / parens" r
# (${VISUAL}$0)
# endsnippet

# snippet "(^|\s*)({|c)" "curly brackets / braces" r
# `!p snip.rv = match.group(1)`{${VISUAL}$0}
# endsnippet

# snippet '(^|\s+)(\[|s)' "square brackets" r
# `!p snip.rv = match.group(1)`[${VISUAL}$1]$0
# endsnippet

# snippet '(^|\s+)(\<|a)' "angle brackets / chevrons" r
# `!p snip.rv = match.group(1)`<${VISUAL}$1>$0
# endsnippet

# snippet " "quote" w
# "${VISUAL}$1"$0
# endsnippet

# snippet ' "single quote" w
# '${VISUAL}$1'$0
# endsnippet

# snippet ` "backtick" w
# \`${VISUAL}$1\`$0
# endsnippet

# TODO: check if existing quotes are balanced
# snippet '(^[^"]+)"' "ha" rA
# `!p snip.rv = match.group(1)`"${VISUAL}$1"$0
# endsnippet

snippet "(true|false)+" "true|false toggle" r
`!p snip.rv = toggle('true|false', match.group(1))`
endsnippet

snippet "(always|never)+" "always|never toggle" r
`!p snip.rv = toggle('always|never', match.group(1))`
endsnippet

snippet "(yes|no)+" "yes|no toggle" r
`!p snip.rv = toggle('yes|no', match.group(1))`
endsnippet

# snippet "(0|1)+" "0|1 toggle" r
# `!p snip.rv = toggle('0|1', match.group(1))`
# endsnippet

### Non-Ascii-characters

# possible alternative :h langmap

priority -1

snippet "(ue|Ã¼)" "ue|Ã¼ toggle" r
`!p snip.rv = toggle('ue|Ã¼', match.group(1))`
endsnippet

snippet "(Ue|Ãœ)" "UE|Ãœ toggle" r
`!p snip.rv = toggle('Ue|Ãœ', match.group(1))`
endsnippet

snippet "(ae|Ã¤)" "ae|Ã¤ toggle" r
`!p snip.rv = toggle('ae|Ã¤', match.group(1))`
endsnippet

snippet "(Ae|Ã„)" "AE|Ã„ toggle" r
`!p snip.rv = toggle('Ae|Ã„', match.group(1))`
endsnippet

snippet "(oe|Ã¶)" "oe|Ã¶ toggle" r
`!p snip.rv = toggle('oe|Ã¶', match.group(1))`
endsnippet

snippet "(Oe|Ã–)" "OE|Ã– toggle" r
`!p snip.rv = toggle('Oe|Ã–', match.group(1))`
endsnippet

snippet "(ss|ÃŸ)" "ss|ÃŸ toggle" r
`!p snip.rv = toggle('ss|ÃŸ', match.group(1))`
endsnippet

snippet "(eur|EUR|â‚¬)" "eur|EUR|â‚¬ toggle" r
`!p snip.rv = toggle('eur|EUR|â‚¬', match.group(1))`
endsnippet

snippet micro "Micro sign" i
Âµ
endsnippet

snippet paragraph "Paragraph sign" w
Â§
endsnippet

snippet degree "Degree sign" i
Â°
endsnippet

priority 1

# snippet '(\d+)' "(\d+)" r
# `!p snip.rv = int(match.group(1)) + 1`
# endsnippet

### Misc

# comments
snippet // "multiline comment" w
/* ${VISUAL}$0 */
endsnippet

snippet node "node shebang" b
#!/usr/bin/env node

// ${1:TODO: description}

$0
endsnippet

snippet bash "bash shebang" b
#!/usr/bin/env bash

# ${1:TODO Description}

${2:source bash-helpers}

$0
endsnippet

snippet perl "perl shebang" b
#!/usr/bin/env perl

# ${1:TODO Description}

use strict;
use warnings;
no warnings 'uninitialized';
use Data::Dumper;
use utf8;
# binmode('STDOUT', 'utf-8')

$0
endsnippet

snippet date "YYYY-MM-DD" w
(`!v strftime("%F")`)
endsnippet

snippet datetime "ISO format datetime" w
`!v strftime("%FT%H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetimeSimple "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet lorem "Lorem Ipsum - 50 Words" w
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

snippet / "comment" b
`!v nb#surroundings()[0]`${VISUAL}$0`!v  nb#surroundings()[1]`
endsnippet

snippet '(^\s*).*todo' "TODO" r
`!p snip.rv = match.group(1)``!v nb#surroundings()[0]`TODO:$0`!v  nb#surroundings()[1]`
endsnippet

snippet '(^\s*).*testing' "TESTING" r
`!p snip.rv = match.group(1)``!v nb#surroundings()[0]`TBD: TESTING:$0`!v  nb#surroundings()[1]`
endsnippet

# snippet '(^\s*).*tbd' "TBD" r
# `!p snip.rv = match.group(1)``!v nb#surroundings()[0]`TBD:$0`!v  nb#surroundings()[1]`
# endsnippet

snippet '(.*\s*).*note' "NOTE" r
`!v nb#surroundings()[0]`NOTE:$0`!v  nb#surroundings()[1]`
endsnippet

# snippet '.*tag' "TAGS" r
# `!v nb#surroundings()[0]`TAGS:$0`!v  nb#surroundings()[1]`
# endsnippet

snippet '.*fix' "FIX" r
`!v nb#surroundings()[0]`FIX:$0`!v  nb#surroundings()[1]`
endsnippet

snippet '.*deb' "DEBUG" r
`!v nb#surroundings()[0]`DEBUG:$0`!v  nb#surroundings()[1]`
endsnippet

snippet '(^\s*).*check' "check out" r
`!v nb#surroundings()[0]`TODO: check out: $0`!v  nb#surroundings()[1]`
endsnippet

snippet '(^\s*).*see' "see also" r
`!v nb#surroundings()[0]`SEE ALSO:$0`!v  nb#surroundings()[1]`
endsnippet

snippet password "generate a secure password" w
`apg -M SNC -n 1`
endsnippet

snippet ls "ls" b
`ls -1`
endsnippet

snippet pwd "pwd" w
`!v getcwd()`
endsnippet

snippet path "path" w
`!v expand('%:p')`
endsnippet

snippet dir "dir" w
`!v expand('%:p:h:t')`
endsnippet

snippet file "file" w
`!v expand('%:t')`
endsnippet

snippet base "base" w
`!v expand('%:t:r')`
endsnippet

snippet home "home" w
`!v $HOME`
endsnippet

snippet "(DEBUG|INFO)+" "DEBUG|INFO toggle" r
`!p snip.rv = toggle('DEBUG|INFO', match.group(1))`
endsnippet

snippet uuid "uuid" i
`uuidgen`
endsnippet

snippet b64 "base64"
`!p
snip.rv = os.popen("base64-my " + snip.v.text).read()
`
endsnippet

snippet javascript_skeleton "javascript_skeleton" b
README.md
package.json
pm2.json
Dockerfile
.tern-project
endsnippet

snippet "(dev|test|git|pet|prod)+" "dev|test|git|pet|prod toggle" r
`!p snip.rv = toggle('dev|test|git|pet|prod', match.group(1))`
endsnippet

snippet hh "handlebars" w
{{${VISUAL}$1}}$0
endsnippet

snippet ho "handlebars opening tag" w
{{#$1${VISUAL}}}$0
endsnippet

snippet hc "handlebars closing tag" w
{{/$1${VISUAL}}}$0
endsnippet

snippet hC "handlebars comment" w
{{! ${VISUAL}$1}}$0
endsnippet

snippet par "parameter" w
parameter
endsnippet

snippet ok "ok / done" w
[DONE]
endsnippet

snippet done "ok / done" w
[DONE]
endsnippet

snippet wont "wontfix" w
[WONTFIX]
endsnippet

snippet vomit "vomit" w
ðŸ¤®
endsnippet

snippet heart "heart" w
ðŸ–¤ 
endsnippet

snippet chat "chat" w
ðŸ’¬ [NEEDS INFO]
endsnippet

snippet tbd "tbd" w
[TBD]
endsnippet

snippet "(-|=>)+" "-|=> toggle" r
`!p snip.rv = toggle('-|=>', match.group(1))`
endsnippet

snippet uu "unter Umstaenden" w
u. U.
endsnippet

# snippet ( "(" w
# (${VISUAL}$0)
# endsnippet

snippet { "{" w
{
  ${VISUAL}$0
}
endsnippet

# snippet [ "[" w
# [${VISUAL}$0]
# endsnippet

snippet internalip "internalip" w
`internalip`
endsnippet

snippet localhost "internalip" w
`internalip`
endsnippet

# snippet "\(" "(" rA
# (${VISUAL}$1)$0
# endsnippet

snippet eg "eg" w
e.g.
endsnippet

snippet zb "zb" w
z.B.
endsnippet

snippet nf "nf" b
{noformat}
${VISUAL}$0
{noformat}
endsnippet

snippet quote	"quote" b
{quote}
${VISUAL}$0
{quote}
endsnippet

snippet shrug "shrug" b
Â¯\_(ãƒ„)_/Â¯
endsnippet

