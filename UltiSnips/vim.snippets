global !p
def toCamelCase(v):
  v = re.sub(r'(.+)\.[^.]*$', r'\1', v)
  v = re.sub(r'[\.\/]*', r'', v)
  return re.sub(r'(\W)', r'', v.title())

def toMethodCase(v):
  v = re.sub(r'(.+)\.[^.]*$', r'\1', v)
  v = re.sub(r'[\.\/]*', r'', v)
  return v[0:1].lower() + re.sub(r'(\W)', r'', v.title()[1:])

def toSnakeCase(v):
  v = toCamelCase(v)
  v = re.sub(r'\W', r'_\1', v).lower()
  return v

def ucfirst(s):
    return s[0].upper() + s[1:]
endglobal

snippet deinrc "Boilerplaite vimrc" b
set nocompatible

let g:plugin_dir = expand('~/.vim/dein')
let g:dein_dir = g:plugin_dir . '/repos/github.com/Shougo/dein.vim'
execute 'set runtimepath+=' . g:dein_dir

if !isdirectory(g:dein_dir)
  call mkdir(g:dein_dir, 'p')
  silent execute printf('!git clone --depth 1 %s %s', 'http://github.com/Shougo/dein.vim', g:dein_dir)
endif

call dein#begin(g:plugin_dir)

" Let dein manage dein
call dein#add('Shougo/dein.vim')
" call dein#add('Shougo/vimproc.vim', {'build': 'make'})
" call dein#add('Shougo/unite.vim')
  $0
call dein#end()

if dein#check_install() 
  call dein#install()
endif

filetype plugin indent on
endsnippet

snippet deinadd "Add bundle" b
call dein#add('$1')
$0
endsnippet

snippet n "name something" w
`!p snip.rv = ucfirst(snip.basename)`_$0
endsnippet

snippet augroup "augroup" b
augroup `!p snip.rv = ucfirst(snip.basename)`_augroup_$0
endsnippet

# let g:my_${1:`!p snip.rv = toSnakeCase(snip.basename)`}_${2:name} = $0
snippet g "global variable name" w
g:`!p snip.rv = ucfirst(snip.basename)`_${VISUAL}$0
endsnippet

# a function name that works for configs of plugins - some of them have a
# dash which s not allowed for a function name
snippet fun "Function" b
function! `!p snip.rv = ucfirst(snip.basename)`_${1:name}($2) abort
  $0
endfunction
endsnippet

snippet if "if" b
if $1
  ${VISUAL}$0
endif
endsnippet

snippet info "info" 
call INFO($1)$0
endsnippet

snippet infoo "info with 1 arg" 
call INFO('$1:', $1)
endsnippet

snippet echo "echo with 1 arg"
echo '$1:' . $1
endsnippet

snippet debug "debug" 
call DEBUG($0)
endsnippet

snippet neobundle "Description" b
" ${1:description}
NeoBundle '${2:plugin name or github url}'
endsnippet

snippet neobundlepost "do something after plugin is loaded" b
if neobundle#tap('${1:`!v expand('%:t:r')`}') 
  function! neobundle#hooks.on_post_source(bundle) abort
    $0
  endfunction
  call neobundle#untap()
endif
endsnippet

snippet command "command" b
command! -nargs=* ${1:name} call $1(<f-args>)
function! $1(...) abort
  $0
endfunction
endsnippet

snippet ifneo "if is neovim" b
if IsNeoVim()
  ${VISUAL}$0
endif
endsnippet

snippet autocmd "autocmd" b
augroup augroup_${3:My}${1:`!p snip.rv = toCamelCase(snip.basename)`}_${2:name}
  autocmd!
  autocmd $0
augroup END
endsnippet

snippet c "concat" w
'$1:', $1$0
endsnippet

snippet q "quotes" w
'${VISUAL}$0'
endsnippet

snippet for "foreach" b
for ${1:var} in ${2:list}
  $0
endfor
endsnippet

snippet fori "for i in range" b
for ${1:i} in range(${2:1,10})
  $0
endfor
endsnippet

snippet whilei "whilei" b
let i = 0
while i <= $1
  let i = i + 1
  $0
endwhile
endsnippet

snippet while "while" b
while 1
  $0
endwhile
endsnippet

snippet exists "exists" w
if ! exists('${1:b:var}')
  let $1 = $0
endif
endsnippet

snippet get "let with default" w
let $1 = get(${1/\:.*/:/}, '${1/^.*\://}', ${2:default})
endsnippet

snippet s "String" w
'${1:key}': '${2:value}',$0
endsnippet

# snippet n "Number" w
# '${1:key}': ${0:value},
# endsnippet

snippet a "Array" w
[
  \ ${VISUAL}$0
\ ],
endsnippet

snippet na "Named array" w
'${1:key}': [
  \ ${VISUAL}$0
\ ],
endsnippet

snippet o "Object" w
{
  \ ${VISUAL}$0
\ },
endsnippet

snippet no "Named object" w
'${1:key}': {
  \ ${VISUAL}$0
\ },
endsnippet

snippet exe "execute" w
execute $0
endsnippet

snippet cut "cut a quoted string" w
' . $0 . '
endsnippet

snippet cr "<cr>" w
<cr>
endsnippet

snippet bar "<bar>" w
<bar>
endsnippet

snippet nop "<nop>" w
<nop>
endsnippet

snippet xx "here"
call INFO('### HERE`!v
  line('.')
  ` `!v
  expand('%:t') . ':' . line('.')
  ` ' . strftime("%F %T"))
endsnippet

snippet xxx "here"
call INFO('### HERE`!v
  line('.')
  ` `!v
  expand('%:t') . ':' . line('.')
(`!v strftime("%F")`)
  `')
endsnippet

snippet fileexists "check if a file exists" b
if filereadable($1)
  $0
endif
endsnippet

snippet push "array push" b
call add(${1:array}, ${2:item})
endsnippet

snippet remove_array_entry "array remove at index" w
call remove(${1:array}, ${2:index})
endsnippet

snippet lead "<leader>" w
<leader>
endsnippet

snippet sil "<silent>" w
<silent>
endsnippet

snippet % "current buffer name" w
`!v expand('%:t')`
endsnippet

snippet %p "current buffer name" w
`!v expand('%:p')`
endsnippet

snippet b: "script specific buffer var" w
b:`!v expand('%:t:r')`_$0
endsnippet

snippet last "last array element" w
$1[len($1) - 1]
endsnippet

snippet arg "argument to normal var" w
let $1 = a:$1
endsnippet

snippet len "len" w
len($1) - 1
endsnippet

snippet map "map" b
nnoremap <silent> ${1:<leader>}$0
endsnippet

snippet "(.*)finish" "finish" r
finish " #######################################################################
endsnippet

# getcurpos() is Neovim only
snippet getcurpos "getcurpos" b
let [bufnum, lnum, col, off] = getpos('.')
endsnippet

snippet substr "substr" w
${1:string}[${2:from} : ${3:to}]
endsnippet

snippet getchar "ask for a single character" b
echo 'Specify $1: '
let ${2:$1} = nr2char(getchar())
redraw
execute 'echo "' . $2 . '"'
endsnippet


snippet put "put" b
:put =${1:a:term . ':'}
endsnippet

snippet buf "buf" w
<buffer>
endsnippet

# getreg(operator#user#register())
snippet operator "operator" b
if neobundle#tap('vim-operator-user') 
  function! neobundle#hooks.on_post_source(bundle) abort
    call operator#user#define('${1:name}', '${3:Op`!p snip.rv = toCamelCase(t[1])`$2}')
    function! $3(motion_wise) abort
      let v = operator#user#visual_command_from_wise_name(a:motion_wise)
      execute 'normal!' '\`[' . v . '\`]"xy'
      ${6:execute "echo '" . @x . "'"}$0
    endfunction
  endfunction
  call neobundle#untap()
endif
map <leader>${5:mapping} <Plug>(operator-$1)
endsnippet

snippet setl "set local" b
let &l:$1 = $0
endsnippet

snippet set "set" b
let &$1 = $0
endsnippet

snippet replace "replace" w
substitute(${1:input}, '${2:search\s\+}', '${3:replace}', 'g')
endsnippet
