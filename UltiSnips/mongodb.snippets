# TODO: use db.getCollection('dbname') instead of db.dbname to make collections
# made up solely from numbers

# config: ~/.mongoshrc.js

priority 5

snippet show "show collections" b
show collections
endsnippet

snippet updateKey "updateOne" b
db.${1:collection}.updateOne({
  "${2:search key}": "${3:search value}"
},
[{
  $set : { "${4:set key}": "${5:$set.value}" }
}],
{"multi": true});
endsnippet

snippet deleteKey "updateOne" b
db.${1:collection}.updateOne({
  "${2:search key}": "${3:search value}"
},
[{
  $unset : { "${4:set key}": "${5:$set.value}" }
}],
{"multi": true});
endsnippet

snippet find "find" b
db.${1:collection}.find({
  "${2:search key}": "${3:search value}"
},
{
  "${4:show key}": 1,$0
})
endsnippet

snippet findCount "count" w
.count()
endsnippet

snippet findlike "like" b
db.${1:collection}.find({
  "${2:search key}": /${3:regex}/i
},
{
  "${4:show key}": 1,$0
})
endsnippet

snippet update "update" b
insert
endsnippet

snippet replace "replaceOne" b
insert
endsnippet

snippet insert "insert aka replaceOne" b
db.${1:collection}.replaceOne({
  "${2:search key}": "${3:search value}"
},
$0${VISUAL},
{upsert: true, },
)
endsnippet

snippet insertMany "insertMany" b
db.${1:collection}.insertMany([
${VISUAL}$0
])
endsnippet

snippet drop "drop" b
db.${1:collection}.drop()
endsnippet

# snippet delete "delete" b
# db.${1:collection}.deleteMany({
#   ${2:delete key} : "${0:delete value}"
# })
# endsnippet

# put after an aggregate - needs to be on the same line as the ])...
snippet delete "delete" w
.map((doc) => {
  console.log(\`deleting: ${doc.id} (_id: ${doc._id})\`)
  db.${1:collection}.remove(
    {"_id": doc._id },
  )
  return doc._id
})
endsnippet

# put after an aggregate - needs to be on the same line as the ])...
snippet updateDoc "update" w
.map((doc) => {
  console.log(\`updating: ${doc.id} (_id: ${doc._id})\`)
  db.${1:collection}.updateOne(
    { "_id": doc._id, },
    [
      { $set : { "${4:set key}": "${5:$set.value}$0" }, },
    ],
    { multi: false },
  )
  return doc._id
})
endsnippet

# put after an aggregate - needs to be on the same line as the ])...
snippet updateArrayElement "updateArrayElement" w
.map((doc) => {
  console.log(\`updating: ${doc.id} (_id: ${doc._id})\`)
  db.${1:collection}.updateOne(
    { "_id": doc._id, },
    { $set: { "${2:arrayPath}.$[matchingElement].${5:setKey}": "${6:setValue}$0" }, },
    { 
      arrayFilters: [ { "matchingElement.${3:matchKey}": "${4:matchValue}" } ],
      multi: false,
    },
  )
  return doc._id
})
endsnippet

# put after an aggregate - needs to be on the same line as the ])...
snippet pushArrayElement "pushArrayElement" w
.map((doc) => {
  console.log(\`updating: ${doc.id} (_id: ${doc._id})\`)
  db.${1:collection}.updateOne(
    { "_id": doc._id, },
    { $push:
      {
        "${2:arrayPath}": 
        {
          $each: [
            {$0
            },
          ],
        },
      },
    },
  )
  return doc._id
})
endsnippet

snippet deleteAll "deleteAll" b
// DELETES ALL ENTRIES db.${1:collection}.remove({})
endsnippet

snippet isNull "isNull" w
{$exists: true, $eq: null},
endsnippet

snippet isNotNull "isNotNull" w
{$exists: true, $ne: null},
endsnippet

snippet isUndefined "isUndefined" w
{$exists: false},
endsnippet

snippet eq "eq" w
{ $eq: ${VISUAL}$0 },
endsnippet

snippet == "eq" w
{ $eq: ${VISUAL}$o },
endsnippet

snippet ne "ne" w
{ $ne: ${VISUAL}$0 },
endsnippet

snippet != "ne" w
{ $ne: ${VISUAL}$0 },
endsnippet

snippet exists "exists" b
"${1:field in dotnotation}": { "$exists": ${2:true}$0 },
endsnippet

snippet not "not" w
{ $not: ${VISUAL}$0 },
endsnippet

snippet lt "lower then" w
{ $lt: ${VISUAL}$0 },
endsnippet

snippet gt "greater then" w
{ $match: { $1: { $gt: ${VISUAL}$0 } },
endsnippet

# aggregate

snippet "(sel|find|aggregate)" "aggregate match" r
global.myFirst = 1
global.myCount = 0
db.${1:collection}.aggregate([
  $0
])
endsnippet

snippet match "match" w
{ 
  $match: {
    ${VISUAL}$0
  },
},
endsnippet

snippet where "where" w
{ 
  $match: {
    ${VISUAL}$0
  },
},
endsnippet

snippet : ":" b
"${VISUAL}$1": ${2:"$0"},
endsnippet

snippet like "like" b
"${VISUAL}$1": /$0/i,
endsnippet

snippet matchArrayElement "matchArrayElement" b
"$1": {
  $elemMatch: {$0
  }, 
},
endsnippet

snippet limit "limit" b
{ $limit: $0 },
endsnippet

snippet random "random" b
{ $sample: { size: 3 } },
endsnippet

snippet project "project" b
{
  $project: {
    _id: 0,
    id: 1,$0
  }
},
endsnippet

snippet count "count" b
{ $count: "count"},
endsnippet

snippet sort "sort" b
{
  $sort: {
    "$${1:field}": ${2:1}
  },$0
},
endsnippet

snippet groupByRegexMatch "groupByRegex" b
{
  $addFields: {
    matches: {
      $regexMatch: { input: "\$$1", regex: /$0/, } 
    }
  }
},
{
  $group: {
    _id: "$matches",
    count: {$sum: 1}
  }
}
endsnippet

# NOTE: set in ~/.mongoshrc.js
snippet limitMongosh "mongoshLimit" b
config.set("displayBatchSize", 1000$0)
endsnippet

snippet arrayFieldMatch "arrayFieldMatch" b
{
  $match: {
    "${1:arrayFieldName}": {
      $elemMatch: {
        '${2:arrayItemFieldName}': {
          $in: [ '${3:arrayItemFieldValue}' ] },
          $nin: [ '${4:arrayItemFieldValue}' ] },$0
        },
      }, 
    },
  },
},
endsnippet

snippet unwind "unwind" b
{
  $unwind: '$${1:arrayFieldName}',$0
},
endsnippet

snippet addFields "addFields" b
{
  $addFields: {
    '${1:fieldName}': '$${2:fieldPath}'
  }
},
endsnippet

snippet set "set" b
$set : { "${1:set key}": "${2:$set.value}$0" },
endsnippet

snippet t "start transaction" b
var session = db.getMongo().startSession()
var t = session.startTransaction()
endsnippet
snippet start "start" b
t
endsnippet

snippet rollback "rollback transaction" b

session.abortTransaction()

endsnippet

snippet commit "commmit transaction" b

session.commitTransaction()

endsnippet

snippet filter "$filter" b
$filter: {
  input: "\$$1",
  cond: { $and: [
      { $eq: ["\$\$this.$2", "$3"] },$0
    ]
  }
},
endsnippet
snippet projectFilter "redirect to projectFilter" b
$1: {
  filter$0
},
endsnippet

snippet and "and" b
{
  $and: [
    ${VISUAL}$0
  ],
},
endsnippet

snippet in "$in" w
{
  $in: [
    "${VISUAL}$0",
  ],
},
endsnippet

snippet date "date" w
ISODate(${VISUAL}$0)
endsnippet

snippet distinct "distinct" b
groupDistinct
endsnippet

snippet groupDistinct "distinct" b
{
  $group: {
    _id: [ $1, ],
    doc: { $first: "$$ROOT" },
  },
},
{ $replaceRoot: { newRoot: "$doc" } },
endsnippet

snippet groupByArrayField "groupByArrayField" b
{
  $addFields: {
    "${1:pathToArray}._root": "$$ROOT",
  },
},
{
  $unwind: { path: "$$1" },
},
{ $match: { "$1.${2:match field}": "${3:match value}" } },
{
  $group: {
    _id: "$$1.${4:group field}",
    _root: { $first: "$productCharacteristic._root" },
  },
},
{ $replaceRoot: { newRoot: "$_root" } },
endsnippet

snippet grepDb "grep whole db - careful!" b
db.getCollectionNames().forEach(function(collectionName) {
  db.getCollection(collectionName).find().forEach(function(doc) {
    var json = JSON.stringify(doc)
    if (json.match(/${0:regex}/i) == null) {
      return
    }
    printjson(doc)
  })
})
endsnippet

snippet grep "grep" b
const myCount = 0
db.${1:collectionName}.find().forEach(function(doc) {
  var json = JSON.stringify(doc)
  if (json.match(/$2/i) == null) {
    return
  }$0
  myCount++
  printjson(doc)
})
console.log(\`count: ${myCount}\`)
endsnippet

snippet grep2 "grep2" b
if (json.match(/$1/i) == null) {
  return
}$0
endsnippet

snippet csv "csv" w
.forEach(function(doc) {
    const keys = Object.keys(doc).sort()
    const header = keys.join(";")
    if(!global.myHeader) {
      print(header)
      global.myHeader = header
    }
    if(global.myHeader != header) {
      throw new Error('header mismatch: ' + header + ' / ' + global.myHeader)
    }
    const values = []
    for(const key of keys) {
      values.push(doc[key])
    }
    print(values.join(";"))
})
global.myHeader = undefined
endsnippet

snippet countTodo "countTodo" w
.map(function(doc) {
  print(doc)
}).map(function(doc) {
  global.myCount = global.myCount + 1
})
print("Count: " + global.myCount)
global.myCount = undefined
endsnippet
