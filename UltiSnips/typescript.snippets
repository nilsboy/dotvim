priority 3

extends javascript

global !p

def toggle(t, opt):
  opts = t.split('|')
  pos = opts.index(opt)
  if len(opts) == pos + 1:
    pos = 0
  else:
    pos = pos + 1
  return opts[pos]

def toCamelCase(v):
  v = re.sub(r'.*/', r'', v)
  return re.sub(r'(\W)', r'', v.title())
  return v
  v = re.sub(r'^[\/\.]+', r'', v)
  return v
  return v.title()
  return re.sub(r'(\W)', r'', v.title())

def toMethodCase(v):
  v = re.sub(r'(.+)\.[^.]*$', r'\1', v)
  v = re.sub(r'^[\.\/]*', r'', v)
  return v[0:1].lower() + re.sub(r'(\W)', r'', v.title()[1:])

def classNameOld():
  v = snip.basename[0:1].upper()
  v = v + re.sub(r'(\W)', r'', snip.basename.title()[1:])
  return v

def className():
  v = snip.basename
  return v

def escape(v):
  return re.sub(r'`', r'\`', v)

endglobal

snippet class "class" w
class `!p snip.rv = className()` {
  ${VISUAL}$0
}
endsnippet

# snippet class "class" b
# class `!p snip.rv = className()` {
#   ${VISUAL}$0
# }
# endsnippet

snippet a "await" w
await
endsnippet

snippet ignore "ignore" b
// @ts-ignore
endsnippet

snippet importEventEmitter "importEventEmitter" b
import {EventEmitter} from 'events'
endsnippet

snippet importNodeModule "importNodeModule" b
import cytoscape = require('cytoscape')
endsnippet

snippet eventAwait "eventAwait" b
await new Promise((fulfill) => ee.on("end", fulfill))
endsnippet

snippet xlsxReader "xlsxReader" b
#!/usr/bin/env ts-node

import xlsx from "xlsx"
import fs from "fs"

var buf = fs.readFileSync("${1:filename}")
var wb = xlsx.read(buf, { type: "buffer" })
const rows = xlsx.utils.sheet_to_json(wb.Sheets.${2:sheetname})
endsnippet

snippet exit "exit" b
// @ts-ignore
process.exit(1)
endsnippet

snippet init "init" b
#!/usr/bin/env ts-node

//$0
endsnippet

snippet ManyToOne "ManyToOne" b
@ManyToOne({
	entity: () => ${1:entity},
	joinColumn: `${2:joinColumn}`,
})
$1!: $1
endsnippet

snippet OneToMany "OneToMany" b
@OneToMany({
	entity: () => ${1:entity},
	mappedBy: "${2:remoteProperty}",
	joinColumn: "${3:id}",
	inverseJoinColumn: `${4:remoteId}`,
})
$1 = new Collection<$1>(this)
endsnippet

snippet iife "iife" w
(() => {${VISUAL}$0})()
endsnippet

snippet div "div" b
<div id="$0">
${VISUAL}
</div>
endsnippet

snippet diffdeep "diffdeep" b
const deep = require(`deep-diff`)
const diffs = deep.diff(expected, make.toJSON()) || []
endsnippet

snippet contenteditable "contenteditable" b
<h1 contenteditable
	@keyup=${(e: Event) => {
		this.productOffering.name = (e.target as HTMLElement).innerText
	}}
>${this.productOffering.name}</h1>
endsnippet

snippet sourceOfNodeCoreModule "dump source of a core module" b
// dump source of module.js:
node -e 'console.log(process.binding("natives").module)'
endsnippet

snippet exfun "export function" b
export async function ${1:name}($0) {
}
endsnippet

snippet errorDefinition "errorDefinition" b
import { CustomError } from "ts-custom-error"
import { $2 } from "../$2"

export class $1 extends CustomError {
  $3: $2
  public constructor($3: $2) {
    super()
    this.$3 = $3$0
  }
}
endsnippet

snippet e "e" b
expect($0)
endsnippet

snippet uuidmodule "uuidmodule" b
import { v1 as uuidv1 } from 'uuid'
uuidv1()
endsnippet

snippet tag "tag" w
<$1>$0</$1>
endsnippet
