priority 2

global !p

def toggle(t, opt):
  opts = t.split('|')
  pos = opts.index(opt)
  if len(opts) == pos + 1:
    pos = 0
  else:
    pos = pos + 1
  return opts[pos]

def toCamelCase(v):
  v = re.sub(r'.*/', r'', v)
  return re.sub(r'(\W)', r'', v.title())
  return v
  v = re.sub(r'^[\/\.]+', r'', v)
  return v
  return v.title()
  return re.sub(r'(\W)', r'', v.title())

def toMethodCase(v):
  v = re.sub(r'(.+)\.[^.]*$', r'\1', v)
  v = re.sub(r'^[\.\/]*', r'', v)
  return v[0:1].lower() + re.sub(r'(\W)', r'', v.title()[1:])

def className():
  v = snip.basename[0:1].upper()
  v = v + re.sub(r'(\W)', r'', snip.basename.title()[1:])
  return v

def escape(v):
  return re.sub(r'`', r'\`', v)

endglobal

snippet s "String" b
"${1:key}": "${0:value}",
endsnippet

snippet n "Number" b
"${1:key}": ${0:value},
endsnippet

snippet a "Array" b
[
  ${VISUAL}$0
],
endsnippet

snippet na "Named array" b
"${1:key}": [
  ${VISUAL}$0
],
endsnippet

snippet o "Object" b
{
  ${VISUAL}$0
},
endsnippet

snippet no "Named object" b
"${1:key}": {
  ${VISUAL}$0
},
endsnippet

snippet null "Null" b
"${0:key}": null,
endsnippet

snippet req "require" b
const ${2:`!p snip.rv = toMethodCase(t[1])`} = require("$1")
endsnippet

snippet newreq "new" b
const `!p snip.rv = toMethodCase(t[1])` = new (require("$1"))()
endsnippet

snippet reqc "require class" b
const `!p snip.rv = toCamelCase(t[1])` = require("$1")
endsnippet

snippet rekk "rekuire" w
const rekuire = require("rekuire")
endsnippet

snippet rek "rekuire" w
const `!p snip.rv = toMethodCase(t[1])` = rekuire(\`${VISUAL}$1\`)
endsnippet

snippet rekc "rekuire class" w
const `!p snip.rv = toCamelCase(t[1])` = rekuire(\`$1\`)
endsnippet

snippet requirefresh "requirefresh" b
const importFresh = require("import-fresh")
endsnippet

snippet ias "import" b
import * as ${2:`!p snip.rv = toCamelCase(t[1])`} from "$1"
endsnippet

snippet i "import" b
import { ${2:`!p snip.rv = toMethodCase(t[1])`} } from "$1"
endsnippet

snippet ic "import class" b
import `!p snip.rv = toCamelCase(t[1])` from "$1"
endsnippet

snippet inew "import class" b
import `!p snip.rv = toCamelCase(t[1])` from "$1"
`!p snip.rv = toMethodCase(t[1])` = new `!p snip.rv = toCamelCase(t[1])`($1)
endsnippet

snippet new "new" b
const `!p snip.rv = t[1][0:1].lower() + re.sub(r'(\W)', r'', t[1].title()[1:])` = new $1($1)
endsnippet

snippet export "module.exports"
module.exports = $1
endsnippet

snippet stdout "stdout"
process.stdout.write(${VISUAL}$0)
endsnippet

snippet stderr "stderr"
process.stderr.write(${VISUAL}$0)
endsnippet

snippet system "system" b
// use: exec
endsnippet

snippet exec "exec" b
// NOTE: 4.x syntax - newest is 6.x
const execa = require("execa")
const $0 = await execa(\`${VISUAL}$1\`, [])
endsnippet

snippet execsync "exec" b
const exec = require("child_process").execFileSync
const stdout = exec(\`${1:cmd}\`, [])
endsnippet

snippet fs "require fs" b
const fs = require("fs")
endsnippet

snippet fsextra "require fs-extra" b
const fs = require("fs-extra")
endsnippet

snippet readfile "readfile" w
fs.readFileSync(\`${VISUAL}$0\`).toString()
endsnippet

snippet writefile "writefile" w
fs.writeFileSync(\`${1:file}\`, ${VISUAL}$0)
endsnippet

snippet csvReader "CSV reader" b
$0const csv = require("ya-csv")
const [ , , file = \`my.csv\` ] = process.argv
const options = {
  'separator': \`,\`,
  'quote': \`"\`,
  'escape': \`"\`,
  'comment': \`\`,
  'columnsFromHeader': true,
}
const reader = csv.createCsvFileReader(file, options)

// reader.setColumnNames([ 'col1', 'col2' ])

reader.addListener('data', function(data) {
  console.log(data)
})
endsnippet

snippet csvWriter "csvWriter" b
$0const _ = require("lodash")
const csv = require("ya-csv")
const options = {
	separator: \`,\`
	, quote: \`"\`
	, escape: \`"\`
}
const header = _.keys(data[0])
const writer = new csv.CsvWriter(process.stdout, options)
writer.writeRecord(header)
for (const row of data) {
	const orderedRow = _.at(data[0], header)
	writer.writeRecord(orderedRow)
}
endsnippet

snippet l "let" w
let ${1:var} = ${2:\`$3\`}
endsnippet

snippet eq "equals" w
= \`${VISUAL}$0\`
endsnippet

snippet if "if"
if($1) {
  ${VISUAL}$0
}
endsnippet

snippet iff "iff"
if($1${VISUAL}$2) {
  $0
}
endsnippet

snippet else "else"
else {
  ${VISUAL}$0
}
endsnippet

snippet elsei "else"
} else {
  ${VISUAL}$0
endsnippet

snippet foreachkeyjs5 "foreachkeyjs5" b
Object.keys(${1:object}).forEach(function(${2:key}) {
  var ${3:value} = $1[$2]
  ${VISUAL}$0
})
endsnippet

snippet foreachkey "for each in object" b
for(const ${2:variable} in ${1:iterable}) {
  ${VISUAL}$0
}
endsnippet

snippet foreach "for each in collection" b
for(const ${2:variable} of ${1:iterable}) {
  ${VISUAL}$0
}
endsnippet

snippet foreachpairses5 "forpairs" b
  _.toPairs(${1:object}).map(([${2:key}, ${3:value}]) => {
  $0
})
endsnippet

snippet foreachpairs "foreachpairs" b
for (const [${1:key}, ${2:value}] of Object.entries(${3:object})) {
  $0
}
endsnippet

snippet fori "fori" b
for(let i = 0; i < $1.length; i++)
{
  ${VISUAL}$0
}
endsnippet

snippet exit "process.exit" b
process.exit(1$0)
endsnippet

snippet pkginfo "add package.json info to module global" b
require('pkginfo')(module)
endsnippet

snippet class "class" b
module.exports = class `!p snip.rv = className()` {
  ${VISUAL}$0
}
endsnippet

snippet con "constructor" w
constructor(${1:{}}) {
	$0
}
endsnippet

snippet mocha "describe" b
describe(\`$1\`, () => {
  ${VISUAL}$0
})
endsnippet

snippet it "it" b
it(\`$1\`, async() => {
  ${VISUAL}$0
})
endsnippet

snippet aeq "assert" w
assert.equal($1, ${2:\`$0\`})
endsnippet

snippet aok "assert.ok" w
assert.ok(${VISUAL}$0)
endsnippet

snippet adeep "adeep" w
assert.deepStrictEqual(${VISUAL}$0)
endsnippet

snippet athrows "assert.throws" w
assert.throws(() => {
  ${VISUAL}$0
}, ${2:/$1/})
endsnippet

snippet beforeeach "before each test" b
beforeEach(async () => {
  $0
})
endsnippet

snippet aftereach "before each" b
afterEach(async () => {
  $0
})
endsnippet

snippet mockstdout "mock stdout and stderr" b
const stdMocks = require("std-mocks")

afterEach(() => {
  // make sure std* get restored after failing tests
  stdMocks.restore()
})

it(\`$1\`, () => {
  stdMocks.use()
  ${2:test code}
  stdMocks.restore()
  const output = stdMocks.flush()

  assert.ok(/^${3:regex}\n$/.test(output.std${4:err}.toString()))
})
endsnippet

snippet lockfile "Create lockfile" b
const lockFile = require("lockfile")
// TODO: use default paths module
lockFile.lockSync(\`/var/lock/$1.lock\`)
lockFile.unlockSync(\`/var/lock/$1.lock\`)
endsnippet

snippet promisify "promise" b
// use export BLUEBIRD_DEBUG=1 or NODE_ENV=development to see long stacktraces
const Promise = require("bluebird")

// const mv = Promise.promisify(fs.move, {
//   context: fs
//})
endsnippet

snippet find "file walk" b
const fileWalker = require("klaw-sync")
const paths = fileWalker($1).map((entry) => {
  ${0:entry = entry.path}
})
endsnippet

snippet glob-req "glob" b
// checkout micromatch
const glob = require("glob").sync
endsnippet

snippet ls "loop through all globbed files" b
for (const entry of glob(path.join($1, \`*\`))) {
  ${0:const basename = path.basename(entry)}
}
endsnippet

snippet globcheck "glob check for files" b
if(glob(path.join($1)).length !== 0) {
  $0
}
endsnippet

snippet qw "qw" b
function qw(strings, ...keys) {
  return strings
    .join(\` \`, strings)
    .replace(/^\s+/, \`\`)
    .replace(/\s+$/, \`\`)
    .split(/\s+/)
}
endsnippet

snippet f "anonymous function expression" w
($1) => { ${VISUAL}$0 }
endsnippet

snippet af "async anonymous function expression" w
async ($1) => { ${VISUAL}$0 }
endsnippet

snippet fun "function" w
function $1($2) {
  ${VISUAL}$0
}
endsnippet

snippet afun "named function" w
async function $1($2) {
  ${VISUAL}$0
}
endsnippet

snippet m "method" w
$1($2) {
  ${VISUAL}$0
}
endsnippet

snippet am "async method" w
async $1($2) {
  ${VISUAL}$0
}
endsnippet

snippet callback "callback" w
(error, result) => {
  if(error) {
    throw err
  }
  $0
}
endsnippet

snippet readdir "readdir" b
for(let entry of fs.readdirSync(${1:directory})) {
  entry = path.join($1, entry)
  $0
}
endsnippet

snippet pathjoin "path.join" w
path.join($0)
endsnippet

snippet mkdir "mkdir from fs-extra" b
fs.mkdirsSync($1)
endsnippet

snippet rmdir "remove complete directory" b
fs.removeSync($1)
endsnippet

snippet paths "xdg default paths" b
const xdgPaths = require("env-paths")(${1:appName})${2:.log}
endsnippet

snippet tilde "expand tilde in filenames" w
const expandTilde = require("expand-tilde")
${1:file} = expandTilde($1)
endsnippet

snippet exists "file exists" w
fs.existsSync($1)
endsnippet

# mock-fs
#   - mocks the whole filesystem not just a specific directory etc.
#   - breaks require
# level-filesystem
#   - only supports async
# fileception:
#   - may work
snippet fs-mock "mock filesystem" b
const LOG_DIRECTORY = require(`unique-temp-dir`)()
endsnippet

snippet cleanup "run cleanup on program exit" b
require("node-cleanup")((exitCode, signal) => {
  $0
})
endsnippet

snippet wait "keep program running indefinitely" b
// Keep program running
process.stdin.resume()
endsnippet

snippet main "main" b
async function main() {
  ${VISUAL}$0
}

main()
endsnippet

snippet main_iife "main_iife" b
;(async () => {$0
})()
endsnippet

snippet nn "\n in quotes" w
\n
endsnippet

snippet formatter_ignore "exclude the next node in the abstract syntax tree from formatting" b
// prettier-ignore
endsnippet

snippet request "request" b
const bluebird = require("bluebird")
const superagent = require("superagent")
const request = require(\`superagent-bluebird-promise\`)

let response = await request
  .get(\`https://$1\`)
  .query({${2:q: term, count: 3}})

if (response.status >= 400) {
  throw new Error(\`Bad response from server\`)
}

let results = await response.body
endsnippet

snippet _.findIndex "_.findIndex" b
const $1Index = _.findIndex(o => ${2:o.user == 'barney'})(${1:users})
endsnippet

# xml needs viewer characters escaped but may escape as much as html:
# https://www.w3.org/International/questions/qa-escapes#use
# escape for xml instead of html
# https://github.com/wycats/handlebars.js/issues/1301
# Handlebars.Utils.escapeExpression = function(input) {
#   return xmlEscape(input)
# }
snippet handlebars "handlebars" b
const handlebars = require("handlebars")
require("swag").registerHelpers(handlebars)

function fillTemplate(data) {
  const templateRaw = fs
    .readFileSync(\`${1:filename}\`)
    .toString()
  const template = handlebars.compile(templateRaw)
  const result = template({
    products: data
  })
  console.trace(\`### result:\`, result)
}
endsnippet

snippet q "q" w
\`${VISUAL}$1\`$0
endsnippet

snippet match "match" b
let [ , ${3:capture groups} ] = ${1:value}.match(/${2:regex}/) || []$0
endsnippet

snippet "\.match(es)*" "match" r
.match(/${1:regex}/$0)
endsnippet

snippet regex "regex" w
new RegExp(\`${1:regex}\`, \`${2:i}\`)$0
endsnippet

snippet stdin-loop "stdin" b
process.stdin.pipe(require("split")()).on(\`data\`, processLine)

function processLine(line) {
}
endsnippet

snippet argv "argv" w
const [ , , $1 ] = process.argv$0
endsnippet

snippet argvv "argv with path and executable" b
const [ execPath, executable, $1 ] = process.argv$0
endsnippet

snippet pm2_config "pm2_config" b
# surrounded by extra parens to apease javascript linter
# NOTE: process.env vars don't seem to be set when this is loaded
# to setup pm2 run pm2-setup
({
  apps: [
    {
      name: \`$1\`
      , script: \`./src/index.js\`
      , watch: true
      , ignore_watch: [\`*.md\`, \`test\`, \`node_modules\`, \`log\`, \`.*\`]
      , restart_delay: 500
      , max_restarts: 1
      , min_uptime: 5000
      , max_memory_restart: \`200M\`
      , next_gen_js: true
      , log_date_format: \`YYYY-MM-DD HH:mm\`
      , error_file: process.env.HOME + \`/log/$1.log\`
			, out_file: process.env.HOME + \`/log/$1.log\`
      // avoid WARNING: NODE_APP_INSTANCE value of '0'...
      , instance_var: \`INSTANCE_ID\`
    }
  ]
})
endsnippet


snippet reverse-proxy "reverse-proxy" b
#!/usr/bin/env node

// reverse proxy

const proxy = require("redbird")({
  port: 6000
})

proxy.register(\`fqdn\`, \`http://127.0.0.1:3001/path\`)
endsnippet

snippet packageJson "packageJson" b
const packageJson = path.join(require("packpath").self(), \`package.json\`)
endsnippet

snippet "(const|let)+" "const|let toggle" r
`!p snip.rv = toggle('const|let', match.group(1))`
endsnippet

snippet throw "throw" w
throw new Error(\`${VISUAL}$0\`)
endsnippet

snippet "\.then$" ".then" r
.then(($1) => {
  $0
})
endsnippet

snippet "\.catch" ".catch" r
.catch((e) => {
  $0console.error(e.stack)
})
endsnippet

snippet "\.done$" "done()" r
.then(() => {
  done()
})
.catch(() => {
  done()
})$0
endsnippet

snippet instanceof "instanceof" b
if($1 instanceof ${VISUAL}$2) {
  $0
}
endsnippet

snippet errord "error definition" b
`!p snip.rv = className()`.$1 = class $1 extends $2.Error {}$0
endsnippet

snippet cp "copy" w
fs.copySync($1, $0)
endsnippet

snippet isdir "is directory" w
fs.lstatSync($0).isDirectory()
endsnippet

snippet should "should" b
const chai = require(\`chai\`)
chai.use(require(\`chai-as-promised\`))
chai.should()
endsnippet

snippet dateNow "now" w
new Date().toISOString()
endsnippet

snippet dateTimestamp "dateTimestamp" w
moment().format(\`YYYYMMDD-HHmmss\`)
endsnippet

snippet dateDayOfMonth "dateDayOfMonth" w
moment().format(\`DD\`)
endsnippet

snippet config "config" b
// fixed values
./config/default.json

// environment variable resolution only
./config/custom-environment-variables.json
endsnippet

snippet r "r" w
return $0
endsnippet

snippet replace "replace" w
replace(/$1/, \`$0\`)
endsnippet

snippet n "\\n" w
\`\n\`
endsnippet

snippet yaml-read "yaml import" b
const yaml = require(\`js-yaml\`)
const expandTilde = require(\`expand-tilde\`)
const doc = yaml.load(fs.readFileSync(expandTilde(\`$1\`)))
endsnippet

snippet yaml-write "toYaml" w
yaml.safeDump($0)
endsnippet

snippet stdin "get stdin" w
$0 = await require(\`get-stdin\`)()
endsnippet

snippet j "j" b
console.log(\`${VISUAL}$0\`)
endsnippet

snippet jj "here"

console.log('### jj`!v DebugId()` ${VISUAL}$1$0:', ${VISUAL}$1)

endsnippet

snippet jjj "seperator"

console.log(\`\n################################################################ jj`!v DebugId()`$0\n\`)

endsnippet

snippet jd "dump" w

console.log(\`### jj`!v DebugId()` %s:\n%o\n### jj`!v DebugId()`\`, \``!p snip.rv = escape(t[1])`\`, ${VISUAL}$1$0)

endsnippet

snippet jdd "dump" w

console.log(\`### jj`!v DebugId()`\`, require(\`util\`).inspect(${VISUAL}$0, {depth: null}))

endsnippet

snippet dump "dump" w
require(\`pretty-format\`)(${VISUAL}$1$0)
endsnippet

# NOTE: does not seem to show node internals written in c - try util.ispect()
# for that?
snippet jd2 "dump" w

console.log(\`### jj`!v DebugId()` `!p snip.rv = escape(t[1])`:\n\` + require(\`pretty-format\`)(${VISUAL}$1$0).replace(/Object \{/g, \`{\`).replace(/Array \[/g, \`[\`) + \`\n### jj`!v DebugId()`\`)

endsnippet

snippet jt "print to stderr with variable and trace" w

console.trace(\`### jj`!v DebugId()` ${VISUAL}$1:\`, ${VISUAL}$1$0)

endsnippet

snippet tempFileName "tempFileName" b
const fileName = require('tmp').fileSync().name
endsnippet

snippet regexmultiline "(?m) multiline" w
[\s\S]*
endsnippet

# snippet arraySortByElementsHashes "sort any array by the hash of its elements" b
# const hash = require(\`object-hash\`)
# function sortArrayByElementsHashes(array) {
# 	return array.sort((a, b) => {
# 		return hash(a) > hash(b)
# 	})
# }
# const $1 = sortArrayByElementsHashes($1$0)
# endsnippet

snippet arraySortedEquals "arraySortedEquals" b
const hash = require(\`object-hash\`)
const hashOptions = {
  respectType: false
  , unorderedArrays: true
  //, ignoreUnknown: true
}
if (hash($1, hashOptions) == hash($2, hashOptions)) {
$0
}
endsnippet

snippet mapasync "mapasync" b
await Promise.all(
	${VISUAL}${0:foo.map(return async)}
)
endsnippet

snippet map "map" b
$1 = _.map($1, ($2) => {
	return $0
})
endsnippet

snippet "\.map" ".map" r
.map(($1) => {
	${VISUAL}$0
})
endsnippet

snippet mv "mv - move a file" b
const fs = require(\`fs-extra\`)
fs.moveSync(${VISUAL}$0)
endsnippet

snippet rm "rm - remove a file" b
fs.unlinkSync(${VISUAL}$0)
endsnippet

snippet try "try" b
try {
  ${VISUAL}
} catch (e) {
	console.error(e.message)$0
}
endsnippet

snippet catch "catch" w
catch (e) {
	throw e
}
endsnippet

snippet finally "finally" w
finally {
	$0
}
endsnippet

snippet catchclass "catchclass" b
if (e instanceof $1) {
	$0
} else {
	throw e
}
endsnippet

snippet while "while" w
while($1) {
	${VISUAL}$0
}
endsnippet

snippet uuidmodule "uuid" w
const uuid = require(\`uuid/v1\`)
uuid()
endsnippet

snippet isArray "isArray" w
Array.isArray($0)
endsnippet

snippet isObject "isObject" w
typeof $0 === \`\`
endsnippet

snippet keys "object keys" w
Object.keys(${VISUAL}$0)
endsnippet

snippet jsonRelaxedParser "jsonRelaxedParser" b
const relaxedJson = require(\`relaxed-json\`)
const $0 = relaxedJson.parse(${VISUAL}$1)
endsnippet

snippet jsonReadRelaxedFile "jsonRelaxedParser" b
const relaxedJson = require(\`relaxed-json\`)
const $0 = relaxedJson.parse(fs.readFileSync(rekuire.path(\`${VISUAL}$1\`)).toString())
endsnippet

snippet tojson "toJSON" w
JSON.stringify(${VISUAL}$0, null, 2)
endsnippet

snippet jsonparse "parse json" w
JSON.parse(${VISUAL}$0)
endsnippet

snippet .toj "toJSON()" i
.toJSON()
endsnippet

snippet clone "clone" b
$0_.merge({}, ${VISUAL}$1)
endsnippet

snippet cloneHard "clone" b
$0_.clone(${VISUAL}$1)
endsnippet

snippet cloneWithoutSetters "clone" w
$0{...${1:obj}}
endsnippet

snippet mergeWithoutSetters "merge" w
$0{...${1:obj1}, ...${2:obj2}}
endsnippet

snippet contains ".contains" w
includes($0)
endsnippet

snippet containses5 ".contains" w
indexOf($0) !== -1
endsnippet

snippet debug "debug" w
console.log(\`DEBUG> ${VISUAL}$0\`)
endsnippet

snippet info "info" w
console.log(\`INFO > ${VISUAL}$0\`)
endsnippet

snippet infoo "infoo" w
console.log(\`INFO > ${VISUAL}$1$0:\`, ${VISUAL}$1)
endsnippet

snippet warn "warn" w
console.error(\`WARN > ${VISUAL}$0\`)
endsnippet

snippet error "error" w
console.error(\`ERROR> ${VISUAL}$0\`)
endsnippet

snippet cl "echo" w
console.log(\`${VISUAL}$0\`)
endsnippet

snippet ce "echo" w
console.error(\`${VISUAL}$0\`)
endsnippet

snippet test "test" b
test(\`$1\`, async() => {
	${VISUAL}$0
})
endsnippet

snippet test-init "testfile" b
describe
beforeeach
aftereach
test
endsnippet

snippet describe "describe" b
describe(\`$1\`, () => {$0
${VISUAL}
})
endsnippet

snippet "(?<=\W)d" "Interpolated var" r
\$\{${VISUAL}$1\}$0
endsnippet

snippet streamexample "streamexample" b
# see also: from2, merge2
#!/usr/bin/env node

const execa = require(\`execa\`)
const byLine = require(\`byline\`)
const through2 = require(\`through2\`)

async function main() {
  // TODO: error check
  const hosts = [\`dev1\`]
  for (const host of hosts) {
    // const e = await execa(\`ssh\`, [host, \`pm2\`, \`log\`], {
    const e = await execa(\`ssh\`, [host, \`tail\`, \`-f\`, \`/etc/hosts\`], {
      // stdio: \`inherit\`
      // , reject: false
      // , buffer: false
    })

    e.stdout
      .pipe(byLine.createStream())
      .pipe(
        through2(function(chunk, enc, callback) {
          this.push(\`${host} ${chunk}\n\`)
          callback()
        })
      )
      .pipe(process.stdout)
  }
}

main()
endsnippet

snippet assert "assert" b
assert($0, \`$1\`)
endsnippet

snippet joiString "joiString" w
Joi.string().valid(${VISUAL}$0).required()
endsnippet

snippet error "custom error" b
class $1Error extends Error {
  constructor(...params) {
    // Pass remaining arguments (including vendor specific ones) to parent constructor
    super(...params)

    // Maintains proper stack trace for where our error was thrown (only available on V8)
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, CustomError)
    }

    this.name = '$1Error'
  }
}
endsnippet

snippet catch-unhandledRejection "promisethrow" b
process.on(\`unhandledRejection\`, (e) => {
  console.error(\`Error: Caught unhandledRejection: '${e.message}'\`)
  throw e
})
endsnippet

snippet express.middleware "expressm" b
app.use((req, res, next) => {
	$0
	return next()
})
endsnippet

snippet express.get "express.get" b
app.get(\`/$1\`, (req, res) => {
  res.header(\`Content-Type\`, \`text/html\`)
  return res.send(\`$0\`)
})
endsnippet

snippet s "s" w
\`${VISUAL}$0\`
endsnippet

snippet matchallglobal "matchglobal" b
const $1 = [
  ...matchAll(movieRes.data, /$2/g$0)
].map((match) => {
  return match[1]
})
endsnippet

snippet uniq "uniq" w
_.uniq($0)
endsnippet

snippet argv-docopt "argv-docopt" b
function parseArgv() {
  return args = require(\`neodoc\`)
    .run(require(\`redent\`)(
      \`
        ${require(\`../package\`).description}

        Usage:
          ${require(\`path\`).basename(__filename)} [options] <regex>...

        Options:
          -h --help              Show this screen.
          --filename=filename  Fallback filename if none is present in the input.
      \`),
      {
        optionsFirst: true
        , smartOptions: true
      }
    )
}
const argv = parseArgv()
const filename = argv[\`--filename\`]
endsnippet

snippet argvZx "argvZx" b
#!/usr/bin/env zx
// npm i zx
await $\`cat foo | grep bar\`
endsnippet

snippet stripindent "stripindent" b
import {stripIndent} from 'common-tags'
stripIndent\`
${VISUAL}$0
\`
endsnippet

snippet http400BadRequest "400" b
res.status(400).send({ error: \`${VISUAL}$0\` })
endsnippet

snippet fetch "fetch" b
const fetch = require("node-fetch")
const $2 = await fetch(\`${VISUAL}${1:url}\`, {
	method: \`${3:post}\`,
	body: \`\`,$0
	headers: { "Content-Type": "application/json" },
})
endsnippet

snippet regex_with_caputure_groups_loop "regex_with_caputure_groups" b
var XRegExp = require("xregexp")
const cregex = XRegExp(regex, flags)
XRegExp.forEach(this.data, cregex, async (match, i) => {
})
endsnippet

snippet regex_with_caputure_groups "" b
const XRegExp = require("xregexp")
const regex = XRegExp(`^(?<name>.+?)$(?<description>.+)`, `ms`)
const res = XRegExp.exec(row[`Artikelbezeichnung`], regex)
console.log('### res.groups.name:', res.groups.name)
endsnippet

snippet regex_with_caputure_groups "regex" b
const XRegExp = require("xregexp")
const regex = XRegExp(`^(?<name>.+?)$(?<description>.+)`, `ms`)
const res = XRegExp.exec(row[`Artikelbezeichnung`], regex)
console.log('### res.groups.name:', res.groups.name)
endsnippet

snippet xlsReader "xlsReader" b
import xlsx from "xlsx"
import fs from "fs"

const buf = fs.readFileSync("${1:ods or xls etc}")
const wb = xlsx.read(buf, { type: "buffer" })

const rows = xlsx.utils.sheet_to_json(wb.Sheets.Export)

for (const row of rows) {$0
}
endsnippet

snippet mongodbTransaction "mongodbTransaction" b
const session = client.startSession();
try {
	await session.withTransaction(async () => {
		const coll1 = client.db('${1:database}').collection('${2:collection}');
		$0await coll1.insertOne({ abc: 1 }, { session });
		${VISUAL}
	});
} finally {
	await session.endSession();
	await client.close();
}
endsnippet

snippet traverse "traverse" b
$1import traverse from "traverse"
function cleanObject(obj: any) {
  traverse.forEach(obj, function (entry) {
    $0if (entry === undefined || entry === '') {
      this.remove()
    }
  })
  return obj
}
endsnippet

