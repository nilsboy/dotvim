extends json

# babel:
# checkout: babel-preset-es2015
# npm install --save babel-cli babel-preset-es2015
# then run babel-node ....js

snippet req "require" b
const `!p snip.rv = t[1][0:1].lower() + re.sub(r'(\W)', r'', t[1].title()[1:])` = require(\`$1\`)$0
endsnippet

snippet reqc "require class" b
const ${2:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/\u$2/g}} = require(\`$1\`)$0
endsnippet

snippet ex "module.exports"
module.exports = $1
endsnippet

snippet stdout "stdout"
process.stdout
endsnippet

snippet stdin "stdin"
process.stdin
endsnippet

snippet stderr "stderr"
process.stderr
endsnippet

snippet	lodash "require lodash" b
const _ = require(\`lodash\`)
endsnippet

snippet	util "require util" b
const util = require(\`util\`)
endsnippet

snippet	fs "require fs" b
const fs = require(\`fs-extra\`)
endsnippet

snippet csvParserCli "CSV parser CLI" b
$0const csv = require(\`ya-csv\`)

const file = process.argv[2] || \`my.csv\`

const reader = csv.createCsvFileReader(file, {
  'separator': ',',
  'quote': '"',
  'escape': '"',
  'comment': '',
  'columnsFromHeader': true,
})

// reader.setColumnNames([ 'col1', 'col2' ])

reader.addListener('data', function(data) {
  console.log(data)
})

// const writer = new csv.CsvWriter(process.stdout)
//
// reader.addListener('data', function(data) {
//   writer.writeRecord([ data[0] ])
// })
endsnippet

snippet trace "Trace" w
TRACE(\`$1\`)
endsnippet

snippet debug "Debug" w
DEBUG(\`$1\`)
endsnippet

snippet info "Info" w
INFO(\`$1\`)
endsnippet

snippet infoo "Info object" w
INFO(\`$1: ${$1}\`)
endsnippet

snippet warn "Warn" w
WARN(\`$1\`)
endsnippet

snippet error "Error" w
ERROR(\`$1\`)
endsnippet

snippet d "Interpolated var" w
\$\{${1:var}\}
endsnippet

snippet ce "console.error" b
console.error(\`### $1\`)
endsnippet

snippet cee "console.error" b
console.error(\`### $1:\`, $1)
endsnippet

snippet cl "console.log" b
console.log(\`### $1\`)
endsnippet

snippet c "const" w
const $1 = $2
endsnippet

snippet l "let" w
let $1 = ${2:\`$3\`}
endsnippet

# TODO
# let dump = require(`circular-json`).stringify
# console.error(`### node: \n`, dump(node, null, '  '))

snippet dump "dump a var" b
const util = require(\`util\`)
console.error(\`### $1\`, util.inspect($1, {depth: 3}))
endsnippet

snippet xx "here"
console.error(\`### HERE`!v
	line('.')
	` `!v
	expand('%:t') . ':' . line('.')
	`\`)
endsnippet

snippet e "equals" w
= \`$1\`
endsnippet

snippet	if "if"
if($1) {
	$0
}
endsnippet

snippet else "else"
else {
	$0
}
endsnippet

snippet todo "TODO"
// TODO: $0
endsnippet

snippet note "NOTE"
// NOTE: $0
endsnippet

snippet tag "TAGS"
// TAGS: $0
endsnippet

snippet / "comment" b
// $0
endsnippet

snippet fore "for each object" b
for(const ${2:variable} in ${1:iterable}) {
	$0
}
endsnippet

snippet exit "process.exit" b
process.exit(${1:1})
endsnippet

snippet log "logging" b
import Logger from \`log-dwim\`
const { TRACE, DEBUG, INFO, WARN, ERROR, EXIT } = new Logger()
endsnippet

snippet pkginfo "add package.json info to module global" b
require('pkginfo')(module)
endsnippet

snippet class "class" b
class {
	$0
}
endsnippet

snippet cs "constructor" b
constructor(${1:options = {${2:key: defaultValue}}}) {
	$0
}
endsnippet

snippet it "it" b
it(\`$1\`, () => {
	$0
})
endsnippet

snippet asserteq "assert" b
assert.equal($1, \`$0\`)
endsnippet

snippet asok "assert.ok" b
assert.ok($1)
endsnippet

snippet beforeeach "before each test" b
beforeEach(() => {
	$0
})
endsnippet

snippet aftereach "before each" b
afterEach(() => {
	$0
})
endsnippet

snippet mockstdout "mock stdout and stderr" b
const stdMocks = require(\`std-mocks\`)

afterEach(() => {
  // make sure std* get restored after failing tests
  stdMocks.restore()
})

it(\`$1\`, () => {
  stdMocks.use()
  ${2:test code}
  stdMocks.restore()
  const output = stdMocks.flush()

  assert.ok(/^${3:regex}\n$/.test(output.std${4:err}.toString()))
})
endsnippet

snippet lockfile "Create lockfile" b
const lockFile = require(\`lockfile\`)
// TODO: use default paths module
lockFile.lockSync(\`/var/lock/$1.lock\`)
lockFile.unlockSync(\`/var/lock/$1.lock\`)
endsnippet

snippet promise "promise" b
const Promise = require(\`bluebird\`)
// const mv = Promise.promisify(fs.move)
endsnippet

snippet walk "file walk" b
const fileWalker = require(\`klaw-sync\`)
const paths = fileWalker($1).map((entry) => {
	${0:entry = entry.path}
})
endsnippet

snippet glob "glob" b
const glob = require(\`glob\`).sync
endsnippet

snippet globfor "loop through all globbed files" b
for (const entry of glob(path.join($1))) {
	${0:const basename = path.basename(entry)}
}
endsnippet

snippet globcheck "glob check for files" b
if(glob(path.join($1)).length !== 0) {
	$0
}
endsnippet

snippet qw "qw" b
function qw(strings, ...keys) {
  return strings
    .join(\` \`, strings)
    .replace(/^\s+/, \`\`)
    .replace(/\s+$/, \`\`)
    .split(/\s+/)
}
endsnippet

snippet f "anonymous function expression" w
($1) => { $0 }
endsnippet

snippet fun "function" b
function $1($2) {
	$0
}
endsnippet

snippet readdir "readdir" b
for(let entry of fs.readdirSync(${1:directory})) {
	entry = path.join($1, entry)
	$0
}
endsnippet

snippet pj "path.join" w
path.join($0)
endsnippet

snippet mkdir "mkdir from fs-extra" b
fs.mkdirsSync($1)
endsnippet

snippet paths "xdg default paths" b
const xdgPaths = require(\`env-paths\`)(${1:appName})${2:.log}
endsnippet

snippet tilde "expand tilde in filenames" b
const expandTilde = require(\`expand-tilde\`)
${1:file} = expandTilde($1)
endsnippet
