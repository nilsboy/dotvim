global !p

def toggle(t, opt):
  opts = t.split('|')
  pos = opts.index(opt)
  if len(opts) == pos + 1:
    pos = 0
  else:
    pos = pos + 1
  return opts[pos]

def toCamelCase(v):
  v = re.sub(r'.*/', r'', v)
  return re.sub(r'(\W)', r'', v.title())
  return v
  v = re.sub(r'^[\/\.]+', r'', v)
  return v
  return v.title()
  return re.sub(r'(\W)', r'', v.title())

def toMethodCase(v):
  v = re.sub(r'(.+)\.[^.]*$', r'\1', v)
  v = re.sub(r'^[\.\/]*', r'', v)
  return v[0:1].lower() + re.sub(r'(\W)', r'', v.title()[1:])

def className():
  v = snip.basename[0:1].upper()
  v = v + re.sub(r'(\W)', r'', snip.basename.title()[1:])
  return v

endglobal

snippet s "String" b
\`${1:key}\`: \`${0:value}\`,
endsnippet

snippet n "Number" b
\`${1:key}\`: ${0:value},
endsnippet

snippet a "Array" b
[
  ${VISUAL}$0
],
endsnippet

snippet na "Named array" b
\`${1:key}\`: [
  ${VISUAL}$0
],
endsnippet

snippet o "Object" b
{
  ${VISUAL}$0
},
endsnippet

snippet no "Named object" b
\`${1:key}\`: {
  ${VISUAL}$0
},
endsnippet

snippet null "Null" b
\`${0:key}\`: null,
endsnippet

snippet req "require" b
const `!p snip.rv = toMethodCase(t[1])` = require(\`$1\`)
endsnippet

snippet reqc "require class" b
const `!p snip.rv = toCamelCase(t[1])` = require(\`$1\`)
endsnippet

snippet i "import" b
import `!p snip.rv = toMethodCase(t[1])` hahahaha from "$1"
endsnippet

snippet ic "import class" b
import `!p snip.rv = toCamelCase(t[1])` from "$1"
endsnippet

snippet inew "import class" b
import `!p snip.rv = toCamelCase(t[1])` from "$1"
`!p snip.rv = toMethodCase(t[1])` = new `!p snip.rv = toCamelCase(t[1])`($1)
endsnippet

snippet new "new" b
const `!p snip.rv = t[1][0:1].lower() + re.sub(r'(\W)', r'', t[1].title()[1:])` = new $1($1)
endsnippet

snippet ex "module.exports"
module.exports = $1
endsnippet

snippet stdout "stdout"
process.stdout
endsnippet

snippet exec "exec" b
const exec = require(\`child_process\`).execSync
const stdout = exec(\`${1:cmd}\`)
endsnippet

snippet lodash "require lodash" b
const _ = require(\`lodash\`)
endsnippet

snippet util "require util" b
const util = require(\`util\`)
endsnippet

snippet fs "require fs" b
const fs = require(\`fs-extra\`)
endsnippet

snippet readfile "readfile" w
const ${2:data} = fs.readFileSync(\`${0:file}\`).toString()
endsnippet

snippet writefile "writefile" w
fs.writeFileSync(\`${1:file}\`, ${2:data})
endsnippet

snippet csvParserCli "CSV parser CLI" b
$0const csv = require(\`ya-csv\`)

const file = process.argv[2] || \`my.csv\`

const reader = csv.createCsvFileReader(file, {
  'separator': ',',
  'quote': '"',
  'escape': '"',
  'comment': '',
  'columnsFromHeader': true,
})

// reader.setColumnNames([ 'col1', 'col2' ])

reader.addListener('data', function(data) {
  console.log(data)
})

// const writer = new csv.CsvWriter(process.stdout)
//
// reader.addListener('data', function(data) {
//   writer.writeRecord([ data[0] ])
// })
endsnippet

snippet trace "Trace" w
TRACE(\`$1\`)
endsnippet

snippet debug "Debug" w
DEBUG(\`$1\`)
endsnippet

snippet info "Info" w
INFO(\`${VISUAL}$0\`)
endsnippet

snippet infoo "Info object" w
INFO(\`${VISUAL}$1:\`, ${VISUAL}$1)
endsnippet

snippet warn "Warn" w
WARN(\`$1\`)
endsnippet

snippet error "Error" w
ERROR(\`$1\`)
endsnippet

snippet d "Interpolated var" w
\$\{${VISUAL}$1\}$0
endsnippet

snippet l "let" w
let $1 = ${2:\`$3\`}
endsnippet

snippet stringify "stringify JSON" w
JSON.stringify(${VISUAL}$0, \` \`, 2)
endsnippet

snippet eq "equals" w
= \`$1\`
endsnippet

snippet if "if"
if($1) {
  ${VISUAL}$0
}
endsnippet

snippet else "else"
else {
  ${VISUAL}$0
}
endsnippet

snippet foreachkey "for each in object" b
for(const ${2:variable} in ${1:iterable}) {
  $0
}
endsnippet

snippet foreach "for each in collection" b
for(const ${2:variable} of ${1:iterable}) {
  $0
}
endsnippet

snippet forpairs "forpairs" b
  _.toPairs(${1:object}).map(([${2:key}, ${3:value}]) => {
  $0
})
endsnippet

snippet fori "fori" b
for(let i = 0; i < $1.length; i++)
{
  $0
}
endsnippet

snippet exit "process.exit" b
process.exit(1$0)
endsnippet

snippet log "logging" b
const LogDwim = require(\`log-dwim\`)
const logger = new LogDwim()
const { TRACE, DEBUG, INFO, WARN, ERROR, DIE, DUMP } = logger
endsnippet

snippet die "die" w
DIE(\`$0\`)
endsnippet

snippet diee "die with var" w
DIE(\`$0:\`, $0)
endsnippet

snippet pkginfo "add package.json info to module global" b
require('pkginfo')(module)
endsnippet

snippet class "class" b
import Initializer from "../initializer"

export default class `!p snip.rv = className()` extends Initializer {
  ${VISUAL}$0
}
endsnippet

snippet con "constructor" w
constructor(properties = {}) {
  Object.assign(
    this,
    _.defaults(properties, {
      ${0:defaults}
    })
  )
}
}
endsnippet

snippet mocha "describe" b
describe(\`$1\`, () => {
  ${VISUAL}$0
})
endsnippet

snippet it "it" b
it(\`$1\`, () => {
  ${VISUAL}$0
})
endsnippet

snippet aeq "assert" w
assert.equal($1, ${2:\`$0\`})
endsnippet

snippet aok "assert.ok" w
assert.ok(${VISUAL}$0)
endsnippet

snippet adeep "adeep" w
assert.deepStrictEqual(${VISUAL}$0)
endsnippet

snippet athrows "assert.throws" w
assert.throws(() => {
  ${VISUAL}$0
}, ${2:/$1/})
endsnippet

snippet beforeeach "before each test" b
beforeEach(() => {
  $0
})
endsnippet

snippet aftereach "before each" b
afterEach(() => {
  $0
})
endsnippet

snippet mockstdout "mock stdout and stderr" b
const stdMocks = require(\`std-mocks\`)

afterEach(() => {
  // make sure std* get restored after failing tests
  stdMocks.restore()
})

it(\`$1\`, () => {
  stdMocks.use()
  ${2:test code}
  stdMocks.restore()
  const output = stdMocks.flush()

  assert.ok(/^${3:regex}\n$/.test(output.std${4:err}.toString()))
})
endsnippet

snippet lockfile "Create lockfile" b
const lockFile = require(\`lockfile\`)
// TODO: use default paths module
lockFile.lockSync(\`/var/lock/$1.lock\`)
lockFile.unlockSync(\`/var/lock/$1.lock\`)
endsnippet

snippet promise "promise" b
// use export BLUEBIRD_DEBUG=1 or NODE_ENV=development to see long stacktraces
const Promise = require(\`bluebird\`)

// const mv = Promise.promisify(fs.move, {
//   context: fs
//})
endsnippet

snippet walk "file walk" b
const fileWalker = require(\`klaw-sync\`)
const paths = fileWalker($1).map((entry) => {
  ${0:entry = entry.path}
})
endsnippet

snippet glob "glob" b
const glob = require(\`glob\`).sync
endsnippet

snippet ls "loop through all globbed files" b
for (const entry of glob(path.join($1, \`*\`))) {
  ${0:const basename = path.basename(entry)}
}
endsnippet

snippet globcheck "glob check for files" b
if(glob(path.join($1)).length !== 0) {
  $0
}
endsnippet

snippet qw "qw" b
function qw(strings, ...keys) {
  return strings
    .join(\` \`, strings)
    .replace(/^\s+/, \`\`)
    .replace(/\s+$/, \`\`)
    .split(/\s+/)
}
endsnippet

snippet fun "function" b
function ${1:${VISUAL}}($2) {
  $0
}
endsnippet

snippet m "method" b
$1 ($2) {
  ${VISUAL}$0
}
endsnippet

snippet f "anonymous function expression" w
($1) => { ${VISUAL}$0 }
endsnippet

snippet af "async function" b
async $1 ($2) {
  ${VISUAL}$0
}
endsnippet

snippet callback "anonymous node function expression" w
(error, result) => {
  if(error) {
    throw err
  }
  $0
}
endsnippet

snippet readdir "readdir" b
for(let entry of fs.readdirSync(${1:directory})) {
  entry = path.join($1, entry)
  $0
}
endsnippet

snippet pj "path.join" w
path.join($0)
endsnippet

snippet mkdir "mkdir from fs-extra" b
fs.mkdirsSync($1)
endsnippet

snippet rmdir "remove complete directory" b
fs.removeSync($1)
endsnippet

snippet paths "xdg default paths" b
const xdgPaths = require(\`env-paths\`)(${1:appName})${2:.log}
endsnippet

snippet tilde "expand tilde in filenames" b
const expandTilde = require(\`expand-tilde\`)
${1:file} = expandTilde($1)
endsnippet

snippet exists "file exists" w
fs.existsSync($1)
endsnippet

# mock-fs
#   - mocks the whole filesystem not just a specific directory etc.
#   - breaks require
# level-filesystem
#   - only supports async
# fileception:
#   - may work
snippet fs-mock "mock filesystem" b
const LOG_DIRECTORY = require(`unique-temp-dir`)()
endsnippet

snippet cleanup "run cleanup on program exit" b
require(\`node-cleanup\`)((exitCode, signal) => {
  $0
})
endsnippet

snippet wait "keep program running indefinitely" b
// Keep program running
process.stdin.resume()
endsnippet

snippet main "main" b
async function main() {
  $0
}

main()
endsnippet

snippet nn "\n in quotes" w
\n
endsnippet

snippet formatter_ignore "exclude the next node in the abstract syntax tree from formatting" b
// prettier-ignore
endsnippet

snippet request "request" b
const bluebird = require(\`bluebird\`)
const superagent = require(\`superagent\`)
const request = require(\`superagent-bluebird-promise\`)

let response = await request
  .get(\`https://$1\`)
  .query({${2:q: term, count: 3}})

if (response.status >= 400) {
  throw new Error(\`Bad response from server\`)
}

let results = await response.body
endsnippet

snippet _.findIndex "_.findIndex" b
const $1Index = _.findIndex(o => ${2:o.user == 'barney'})(${1:users})
endsnippet

# xml needs viewer characters escaped but may escape as much as html:
# https://www.w3.org/International/questions/qa-escapes#use
# escape for xml instead of html
# https://github.com/wycats/handlebars.js/issues/1301
# Handlebars.Utils.escapeExpression = function(input) {
#   return xmlEscape(input)
# }
snippet handlebars "handlebars" b
const handlebars = require(\`handlebars\`)
require(\`swag\`).registerHelpers(handlebars)

function fillTemplate(data) {
  const templateRaw = fs
    .readFileSync(\`${1:filename}\`)
    .toString()
  const template = handlebars.compile(templateRaw)
  const result = template({
    products: data
  })
  console.trace(\`### result:\`, result)
}
endsnippet

snippet q "q" w
\`${VISUAL}$1\`$0
endsnippet

snippet match "match" b
let [ , ${3:capture groups} ] = ${1:value}.match(/${2:regex}/) || []$0
endsnippet

snippet matches "matches" w
match(/${1:regex}/$0)
endsnippet

snippet regex "regex" w
new RegExp(\`${1:regex}\`, \`${2:i}\`)
endsnippet

snippet stdin-loop "stdin" b
process.stdin.pipe(require(\`split\`)()).on(\`data\`, processLine)

function processLine(line) {
}
endsnippet

snippet argv "argv" b
const [ , , $1 ] = process.argv$0
endsnippet

snippet argvv "argv with path and executable" b
const [ execPath, executable, $1 ] = process.argv$0
endsnippet

snippet pm2_config "pm2_config" b
# surrounded by extra parens to apease javascript linter
# NOTE: process.env vars don't seem to be set when this is loaded
# to setup pm2 run pm2-setup
({

  apps: [
    {
      name: \`$1\`
      , script: \`./index.js\`
      , watch: true
      , ignore_watch: [\`\./test\.*\`, \`\./\..*\`]
      , restart_delay: 500
      , max_restarts: 1
      , min_uptime: 5000
      , max_memory_restart: \`200M\`
      , next_gen_js: true
      , log_date_format: \`YYYY-MM-DD HH:mm\`
      , error_file: \`~/log/$1.log\`
      , out_file: \`~/log/$1.log\`
      , env: {
        NODE_ENV: `development`
      }
    }
  ]
})
endsnippet


snippet reverse-proxy "reverse-proxy" b
#!/usr/bin/env node

// reverse proxy

const proxy = require(\`redbird\`)({
  port: 6000
})

proxy.register(\`fqdn\`, \`http://127.0.0.1:3001/path\`)
endsnippet

snippet packageJson "packageJson" b
const packageJson = path.join(require(\`packpath\`).self(), \`package.json\`)
endsnippet

snippet "(const|let)+" "const|let toggle" r
`!p snip.rv = toggle('const|let', match.group(1))`
endsnippet

snippet throw "throw" w
throw new Error(\`${VISUAL}$0\`)
endsnippet

snippet "\.then$" ".then" r
.then(($1) => {
  $0
})
endsnippet

snippet "\.done$" "done()" r
.then(() => {
  done()
})$0
endsnippet

priority -1

snippet "(\.\w+)$" ".+" r
`!p snip.rv = match.group(1)`($0)
endsnippet

priority 0

snippet inst "inst" b
if($1 instanceof ${VISUAL}$2) {
  $0
}
endsnippet

snippet errord "error definition" b
`!p snip.rv = className()`.$1 = class $1 extends $2.Error {}$0
endsnippet

snippet cp "copy" w
fs.copySync($1, $0)
endsnippet

snippet isdir "is directory" w
fs.lstatSync($0).isDirectory()
endsnippet

snippet should "should" b
const chai = require(\`chai\`)
chai.use(require(\`chai-as-promised\`))
chai.should()
endsnippet

snippet dateNow "now" w
new Date().toISOString()
endsnippet

snippet dateFileStamp "dateFileStamp" w
moment().format(\`YYYYMMDD-HHmmss\`)
endsnippet

snippet config "config" b
// fixed values
./config/default.json

// environment variable resolution only
./config/custom-environment-variables.json
endsnippet

snippet r "r" w
return $0
endsnippet

snippet replace "replace" w
replace(/$1/, \`$0\`)
endsnippet

snippet n "\\n" w
\`\n\`
endsnippet

snippet yaml "yaml import" b
const yaml = require(\`js-yaml\`)
endsnippet

snippet toyaml "toYaml" w
yaml.safeDump($0)
endsnippet

snippet stdin "get stdin" w
$0 = await require(\`get-stdin\`)()
endsnippet

snippet docopt "docopt" b
const DOCOPT = \`
usage: `!v expand('%:t:r')`$0
options:
\`
const neodoc = require(\`neodoc\`)
const args = neodoc.run(DOCOPT, { optionsFirst: true, smartOptions: true })
endsnippet
 
# Debugging

# snippet xxx "here"
# console.trace(\`### HERE`!v
#   line('.')
#   ` `!v
#   expand('%:t') . ':' . line('.')
#   `\`)
# endsnippet

snippet e "print to stderr" w
console.error(\`### ${VISUAL}$0\`)
endsnippet

snippet ee "print to stderr with variable" w
console.error(\`### ${VISUAL}$1:\`, ${VISUAL}$1$0)
endsnippet

snippet eee "print to stderr with variable and trace" w
console.trace(\`### ${VISUAL}$1:\`, ${VISUAL}$1$0)
endsnippet

snippet ex "print to stderr with variable and exit" w
console.trace(\`### ${VISUAL}$1:\`, ${VISUAL}$1$0) ; process.exit(1)
endsnippet

snippet cl "console.log" w
console.log(\`#### ${VISUAL}$1\`)
endsnippet

snippet cll "console.log" w
console.log(\`### ${VISUAL}$1:\`, ${VISUAL}$1$0)
endsnippet

# TODO
# let dump = require(`circular-json`).stringify
# console.error(`### node: \n`, dump(node, null, '  '))

snippet dump "dump a var" b
# TODO: snippet
const util = require(\`util\`)
console.error(\`### $1:\n\`, util.inspect($1, {depth: 30}))
endsnippet

# NOTE: uses special space character (utf8 2001) to prevent vim from
# filtering it in the quickfix window
# console.error(\`### ${VISUAL}$1:\n\`, JSON.stringify(${VISUAL}$1, undefined, \`  \`))$0
snippet jsonn "json" b
# TODO: snippet
console.error(\`### ${VISUAL}$1:\`) ; console.dir(${VISUAL}$1)$0
endsnippet

# JSON.stringify(${VISUAL}$1, undefined, \`  \`)$0
snippet json "json" w
# TODO: snippet
console.error(\`### ${VISUAL}$1:\n\`) ; console.dir(${VISUAL}$1)$0
endsnippet

snippet tempFileName "tempFileName" b
const fileName = require('tmp').fileSync().name
endsnippet

snippet s "s" w
[\s\S]*
endsnippet
